#! /usr/bin/perl

use strict;
use warnings;

use YAML::XS qw/LoadFile/;

use CracTools::BenchCT;
use CracTools::BenchCT::Const;
use CracTools::BenchCT::Checker;
#use CracTools::BenchCT::Analyzer::SAM::Crac;
#use CracTools::BenchCT::Analyzer::VCF;
#use CracTools::BenchCT::Analyzer::BED::Junction;
#use CracTools::BenchCT::Analyzer::BED::Insertion;
#use CracTools::BenchCT::Analyzer::BED::Deletion;
#use CracTools::BenchCT::Analyzer::CRAC::Chimera;
use Getopt::Long qw(:config auto_version); # Get options
use Pod::Usage;   # Printing pod documentation in terminal
use Data::Dumper;
use Carp;

my ($help,$man,$verbose);
GetOptions( "v|verbose"         => \$verbose,
            "man"               => \$man,
            "help"              => \$help,
          ) or pod2usage(-verbose => 1);

pod2usage(-verbose => 1)  if ($help);
pod2usage(-verbose => 2)  if ($man);

my $config_file = shift @ARGV;

my $config = LoadFile($config_file);
#print Dumper($config);

my @stat_types = defined $config->{output}->{statistics}? @{$config->{output}->{statistics}} : ("Accuracy","Sensitivity");

# Loading constants
$CracTools::BenchCT::Const::NB_DECIMALS = $config->{output}->{nb_decimals} if defined $config->{output}->{nb_decimals};
my $threshold_mapping = $config->{checker}->{thresholds}->{MAPPING};
my $threshold_snp     = $config->{checker}->{thresholds}->{SNP};
my $threshold_ins     = $config->{checker}->{thresholds}->{INSERTION};
my $threshold_del     = $config->{checker}->{thresholds}->{DELELETION};
my $threshold_chimera = $config->{checker}->{thresholds}->{CHIMERA};
my $threshold_err     = $config->{checker}->{thresholds}->{ERROR};
my $threshold_splice  = $config->{checker}->{thresholds}->{SPLICE};
$CracTools::BenchCT::Const::THRESHOLD_MAPPING = $threshold_mapping if defined $threshold_mapping;
$CracTools::BenchCT::Const::THRESHOLD_SNP     = $threshold_snp     if defined $threshold_snp;
$CracTools::BenchCT::Const::THRESHOLD_INS     = $threshold_ins     if defined $threshold_ins;
$CracTools::BenchCT::Const::THRESHOLD_DEL     = $threshold_del     if defined $threshold_del;
$CracTools::BenchCT::Const::THRESHOLD_CHIMERA = $threshold_chimera if defined $threshold_chimera;
$CracTools::BenchCT::Const::THRESHOLD_ERR     = $threshold_err     if defined $threshold_err;
$CracTools::BenchCT::Const::THRESHOLD_SPLICE  = $threshold_splice  if defined $threshold_splice;

# Create the checker
my $checker = CracTools::BenchCT::Checker->new(
  info_file           => $config->{checker}->{files}->{mutations}, # contains mutations
  bed_file            => $config->{checker}->{files}->{mapping}, # contains alignements
  err_file            => $config->{checker}->{files}->{errors}, # contains errors
  junction_bed_file   => $config->{checker}->{files}->{splices},
  chimera_tsv_file    => $config->{checker}->{files}->{chimeras},
  crac_index_conf     => $config->{checker}->{files}->{genome_conf},
  verbose             => $verbose,
);

# create softwares
my %softwares;
my %event_types;
foreach my $soft (@{$config->{softwares}}) {
  my %stats;
  foreach my $file (@{$soft->{files}}) {
    print STDERR "[$soft->{name}] Reading $file->{name} file\n" if $verbose;
    my $analyzer_name = 'CracTools::BenchCT::Analyzer::'.$file->{type};
    load_module($analyzer_name);
    #eval {
    #  require $analyzer_name;
    #  $analyzer_name->import();
    #  1;
    #} or do {
    #  my $error = $@;
    #  carp "Error: $error";
    #  carp "Analyzer $analyzer_name not found\n";
    #};
    my $analyzer = $analyzer_name->new(
      file => $file->{name},
      checker => $checker,
      check => $file->{check},
    );
    foreach my $check_type (@{$analyzer->allCheckedEvents}) {
      $event_types{$check_type} = 1;
      if(defined $stats{$check_type}) {
        print STDERR "Cannot check $check_type with file $file->{name}, another files has already process this information\n";
      } else {
        $stats{$check_type} = $analyzer->getStats($check_type);
      }
    }
  }
  $softwares{$soft->{name}} = \%stats;
}

# Print output
my @event_types = sort keys %event_types;
my @cols = map { my $x = $_; map $x."::".$_, @stat_types } @event_types;
print "#softwares\t",join("\t",@cols),"\n";
foreach my $soft (keys %softwares) {
  my @output = ($soft);
  foreach my $event_type (@event_types) {
    my $value;
    foreach my $stat_type (@stat_types) {
      if(defined $softwares{$soft}->{$event_type}) {
        $value = $softwares{$soft}->{$event_type}->getAccuracy if $stat_type =~ /accuracy/i;
        $value = $softwares{$soft}->{$event_type}->getSensitivity if $stat_type =~ /sensitivity/i;
        $value = $softwares{$soft}->{$event_type}->getGain if $stat_type =~ /gain/i;
        $value = $softwares{$soft}->{$event_type}->nbTruePositives if $stat_type =~ /true-positives/i;
        $value = $softwares{$soft}->{$event_type}->nbFalsePositives if $stat_type =~ /false-positives/i;
        $value = $softwares{$soft}->{$event_type}->nbFalseNegatives if $stat_type =~ /false-negatives/i;
        $value = sprintf("%.".$CracTools::BenchCT::Const::NB_DECIMALS."f", $value);
      } else {
        $value = 'N/A';
      }
      push @output, $value;
    }
  }
  print join("\t",@output),"\n";
}

sub load_module {
  for (@_) {
    (my $file = "$_.pm") =~ s{::}{/}g;
    require $file;
  }
}

#my $benchCT = CracTools::BenchCT->new(
#  checker => $checker,
#);


