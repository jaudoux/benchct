#! /usr/bin/perl

use strict;
use warnings;

use YAML::XS qw/LoadFile/;

use CracTools::BenchCT;
use CracTools::BenchCT::Const;
use CracTools::BenchCT::Checker;
use CracTools::BenchCT::Stats;
use Getopt::Long qw(:config auto_version); # Get options
use Pod::Usage;   # Printing pod documentation in terminal
use Data::Dumper;
use Carp;
use Parallel::ForkManager 0.7.6;

my ($help,$man,$verbose);
my $nb_process = 1;
GetOptions( "v|verbose"         => \$verbose,
            "man"               => \$man,
            "help"              => \$help,
            "p=i"               => \$nb_process,
          ) or pod2usage(-verbose => 1);

pod2usage(-verbose => 1)  if ($help);
pod2usage(-verbose => 2)  if ($man);

my $config_file = shift @ARGV;

my $config = LoadFile($config_file);
#print Dumper($config);

my @stat_types = defined $config->{output}->{statistics}? @{$config->{output}->{statistics}} : ("Accuracy","Sensitivity");

# Loading constants
$CracTools::BenchCT::Const::NB_DECIMALS = $config->{output}->{nb_decimals} if defined $config->{output}->{nb_decimals};
my $threshold_mapping = $config->{checker}->{thresholds}->{MAPPING};
my $threshold_snp     = $config->{checker}->{thresholds}->{SNP};
my $threshold_ins     = $config->{checker}->{thresholds}->{INSERTION};
my $threshold_del     = $config->{checker}->{thresholds}->{DELELETION};
my $threshold_chimera = $config->{checker}->{thresholds}->{CHIMERA};
my $threshold_err     = $config->{checker}->{thresholds}->{ERROR};
my $threshold_splice  = $config->{checker}->{thresholds}->{SPLICE};
my $threshold_exon    = $config->{checker}->{thresholds}->{EXON};
$CracTools::BenchCT::Const::THRESHOLD_MAPPING = $threshold_mapping if defined $threshold_mapping;
$CracTools::BenchCT::Const::THRESHOLD_SNP     = $threshold_snp     if defined $threshold_snp;
$CracTools::BenchCT::Const::THRESHOLD_INS     = $threshold_ins     if defined $threshold_ins;
$CracTools::BenchCT::Const::THRESHOLD_DEL     = $threshold_del     if defined $threshold_del;
$CracTools::BenchCT::Const::THRESHOLD_CHIMERA = $threshold_chimera if defined $threshold_chimera;
$CracTools::BenchCT::Const::THRESHOLD_ERR     = $threshold_err     if defined $threshold_err;
$CracTools::BenchCT::Const::THRESHOLD_SPLICE  = $threshold_splice  if defined $threshold_splice;
$CracTools::BenchCT::Const::THRESHOLD_EXON    = $threshold_exon  if defined $threshold_exon;

# Create the checker
my $checker = CracTools::BenchCT::Checker->new(
  vcf_file            => $config->{checker}->{files}->{mutations}, # contains mutations
  bed_file            => $config->{checker}->{files}->{mapping}, # contains alignements
  err_file            => $config->{checker}->{files}->{errors}, # contains errors
  gtf_file            => $config->{checker}->{files}->{annotations}, # contains annotations
  junction_bed_file   => $config->{checker}->{files}->{splices},
  chimera_tsv_file    => $config->{checker}->{files}->{chimeras},
  crac_index_conf     => $config->{checker}->{files}->{genome_conf},
  verbose             => $verbose,
);

my $pm = Parallel::ForkManager->new($nb_process);

# create softwares
my %softwares;

# analyzers
my @analyzers;

#data structure retrieval and handling
$pm -> run_on_finish ( # called BEFORE the first call to start()
  sub {
    my ($pid, $exit_code, $ident, $exit_signal, $core_dump, $data_structure_reference) = @_;
    if(defined $data_structure_reference) {
      my $soft_name = $data_structure_reference->{soft_name};
      my $file = $data_structure_reference->{file};
      my $stats = $data_structure_reference->{stats};
      #$softwares{$soft_name} = $stats;
      foreach my $check_type (keys %{$stats}) {
        if(defined $softwares{$soft_name}->{$check_type}) {
          print STDERR "Cannot check $check_type with file ###, another files has already process this information\n";
        } else {
          $softwares{$soft_name}->{$check_type} = $stats->{$check_type};
        }
      }
    }
  }
);

# Create all analyzers for each softwares
foreach my $soft (@{$config->{softwares}}) {

  foreach my $file (@{$soft->{files}}) {
    next if !defined $file->{check};
    print STDERR "[$soft->{name}] Reading $file->{name} file\n" if $verbose;
    my $analyzer_name = 'CracTools::BenchCT::Analyzer::'.$file->{type};
    load_module($analyzer_name);
    my $analyzer = $analyzer_name->new(
      file => $file->{name},
      checker => $checker,
      check => $file->{check},
      options => $file->{options},
      true_positives_file => $file->{true_positives},
      false_positives_file => $file->{false_positives},
      false_negatives_file => $file->{false_negatives},
    );
    push @analyzers, {analyzer => $analyzer, soft => $soft, file => $file->{name}};
  }
}

# run analyzers
ANALYZERS:
foreach my $analyzer (@analyzers) {

  # Fork analyzers
  $pm->start() and next ANALYZERS;
  
  my %stats;

  # Set a new FileHandle for the child because we will seek that file
  $checker->getBedFileHandle(CracTools::Utils::getReadingFileHandle($config->{checker}->{files}->{mapping})) if defined $config->{checker}->{files}->{mapping};
  $checker->getErrFileHandle(CracTools::Utils::getReadingFileHandle($config->{checker}->{files}->{errors})) if defined $config->{checker}->{files}->{errors};

  # This starts the analyzer to process its file
  $analyzer->{analyzer}->run();

  # fill the stats hash
  foreach my $check_type (@{$analyzer->{analyzer}->allCheckedEvents}) {
    $stats{$check_type} = $analyzer->{analyzer}->getStats($check_type);
  }

  # send it back to the parent process
  $pm->finish(0, {soft_name => $analyzer->{soft}->{name}, stats => \%stats, file => $analyzer->{file}}); 
}

$pm->wait_all_children;

# Set event types that have been checked
my %event_types;
foreach my $soft (keys %softwares) {
  foreach my $check_type (keys %{$softwares{$soft}}) {
    $event_types{$check_type} = 1;
  }
}

# Print output
my @event_types = sort keys %event_types;
my @cols = map { my $x = $_; map $x."::".$_, @stat_types } @event_types;
print "softwares\t",join("\t",@cols),"\n";
foreach my $soft (sort keys %softwares) {
  my @output = ($soft);
  foreach my $event_type (@event_types) {
    my $value;
    foreach my $stat_type (@stat_types) {
      if(defined $softwares{$soft}->{$event_type}) {
        $value = $softwares{$soft}->{$event_type}->getAccuracy if $stat_type =~ /accuracy/i;
        $value = $softwares{$soft}->{$event_type}->getSensitivity if $stat_type =~ /sensitivity/i;
        $value = $softwares{$soft}->{$event_type}->getGain if $stat_type =~ /gain/i;
        $value = $softwares{$soft}->{$event_type}->nbTruePositives if $stat_type =~ /true-positives/i;
        $value = $softwares{$soft}->{$event_type}->nbFalsePositives if $stat_type =~ /false-positives/i;
        $value = $softwares{$soft}->{$event_type}->nbFalseNegatives if $stat_type =~ /false-negatives/i;
        $value = $softwares{$soft}->{$event_type}->nbElements if $stat_type =~ /nb-elements/i;
        $value = sprintf("%.".$CracTools::BenchCT::Const::NB_DECIMALS."f", $value) if $stat_type =~ /(accuracy|sensitivity|gain)/;
      } else {
        $value = 'NA';
      }
      push @output, $value;
    }
  }
  print join("\t",@output),"\n";
}

sub load_module {
  for (@_) {
    (my $file = "$_.pm") =~ s{::}{/}g;
    require $file;
  }
}
